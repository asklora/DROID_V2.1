# Generated by Django 3.1.4 on 2021-07-15 06:15

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('currency_code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('ric', models.CharField(blank=True, max_length=255, null=True)),
                ('currency_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_decimal', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('last_price', models.FloatField(blank=True, null=True)),
                ('last_date', models.DateField(blank=True, null=True)),
                ('utc_timezone_location', models.CharField(blank=True, max_length=255, null=True)),
                ('ingestion_time', models.TimeField(blank=True, null=True)),
                ('utc_offset', models.CharField(blank=True, max_length=100, null=True)),
                ('market_close_time', models.TimeField(blank=True, null=True)),
                ('market_open_time', models.TimeField(blank=True, null=True)),
                ('close_ingestion_offset', models.CharField(blank=True, max_length=100, null=True)),
                ('intraday_offset_close', models.CharField(blank=True, max_length=100, null=True)),
                ('intraday_offset_open', models.CharField(blank=True, max_length=100, null=True)),
                ('backtest_schedule', models.TimeField(blank=True, null=True)),
                ('top_stock_schedule', models.TimeField(blank=True, null=True)),
                ('hedge_schedule', models.TimeField(blank=True, null=True)),
                ('index_ticker', models.TextField(blank=True, null=True)),
                ('index_price', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'currency',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('industry_code', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('industry_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'industry',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IndustryGroup',
            fields=[
                ('industry_group_code', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('industry_group_name', models.CharField(blank=True, max_length=100, null=True)),
                ('industry_group_img', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'db_table': 'industry_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IndustryWorldscope',
            fields=[
                ('wc_industry_code', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('wc_industry_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'industry_worldscope',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('region_id', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('region_name', models.CharField(blank=True, max_length=30, null=True)),
                ('ingestion_time', models.TimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('source_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('source_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'source',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Universe',
            fields=[
                ('ticker', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('created', models.DateField(blank=True, null=True)),
                ('updated', models.DateField(blank=True, null=True)),
                ('last_ingestion', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('quandl_symbol', models.TextField(blank=True, null=True)),
                ('ticker_name', models.TextField(blank=True, null=True)),
                ('ticker_fullname', models.TextField(blank=True, null=True)),
                ('company_description', models.TextField(blank=True, null=True)),
                ('lot_size', models.IntegerField(blank=True, null=True)),
                ('worldscope_identifier', models.CharField(blank=True, max_length=500, null=True)),
                ('icb_code', models.CharField(blank=True, max_length=500, null=True)),
                ('fiscal_year_end', models.CharField(blank=True, max_length=500, null=True)),
                ('entity_type', models.TextField(blank=True, null=True)),
                ('ticker_symbol', models.TextField(blank=True, null=True)),
                ('mic', models.TextField(blank=True, null=True)),
                ('revenue_per_share', models.FloatField(blank=True, null=True)),
                ('market_cap', models.FloatField(blank=True, null=True)),
                ('pe_ratio', models.FloatField(blank=True, null=True)),
                ('pe_forecast', models.FloatField(blank=True, null=True)),
                ('pb', models.FloatField(blank=True, null=True)),
                ('ev', models.FloatField(blank=True, null=True)),
                ('ebitda', models.FloatField(blank=True, null=True)),
                ('wk52_high', models.FloatField(blank=True, null=True)),
                ('wk52_low', models.FloatField(blank=True, null=True)),
                ('free_cash_flow', models.FloatField(blank=True, null=True)),
                ('Error', models.TextField(blank=True, null=True)),
                ('currency_code', models.ForeignKey(blank=True, db_column='currency_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='universe_currency_code', to='universe.currency')),
                ('industry_code', models.ForeignKey(blank=True, db_column='industry_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='universe_industry_code', to='universe.industry')),
                ('wc_industry_code', models.ForeignKey(blank=True, db_column='wc_industry_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='universe_wc_industry_code', to='universe.industryworldscope')),
            ],
            options={
                'db_table': 'universe',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vix',
            fields=[
                ('vix_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'vix',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UniverseExcluded',
            fields=[
                ('ticker', models.OneToOneField(db_column='ticker', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='universe_excluded_ticker', serialize=False, to='universe.universe')),
                ('exclude_dss', models.BooleanField(default=False)),
                ('exclude_dsws', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'universe_excluded',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UniverseRating',
            fields=[
                ('ticker', models.OneToOneField(db_column='ticker', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ticker_rating_ticker', serialize=False, to='universe.universe')),
                ('fundamentals_quality', models.FloatField(blank=True, null=True)),
                ('fundamentals_value', models.FloatField(blank=True, null=True)),
                ('dlp_1m', models.FloatField(blank=True, null=True)),
                ('dlp_3m', models.FloatField(blank=True, null=True)),
                ('wts_rating', models.FloatField(blank=True, null=True)),
                ('wts_rating2', models.FloatField(blank=True, null=True)),
                ('classic_vol', models.FloatField(blank=True, null=True)),
                ('updated', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'universe_rating',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UniverseRatingHistory',
            fields=[
                ('uid', models.TextField(primary_key=True, serialize=False)),
                ('trading_day', models.DateField(blank=True, null=True)),
                ('ai_score', models.FloatField(blank=True, null=True)),
                ('ai_score2', models.FloatField(blank=True, null=True)),
                ('fundamentals_quality', models.FloatField(blank=True, null=True)),
                ('fundamentals_value', models.FloatField(blank=True, null=True)),
                ('technical', models.FloatField(blank=True, null=True)),
                ('momentum', models.FloatField(blank=True, null=True)),
                ('esg', models.FloatField(blank=True, null=True)),
                ('dlp_1m', models.FloatField(blank=True, null=True)),
                ('dlp_3m', models.FloatField(blank=True, null=True)),
                ('wts_rating', models.FloatField(blank=True, null=True)),
                ('wts_rating2', models.FloatField(blank=True, null=True)),
                ('classic_vol', models.FloatField(blank=True, null=True)),
                ('ticker', models.ForeignKey(db_column='ticker', on_delete=django.db.models.deletion.CASCADE, related_name='universe_rating_history_ticker', to='universe.universe')),
            ],
            options={
                'db_table': 'universe_rating_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UniverseRatingDetailHistory',
            fields=[
                ('uid', models.TextField(primary_key=True, serialize=False)),
                ('trading_day', models.DateField(blank=True, null=True)),
                ('earnings_yield_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('earnings_yield_minmax_industry', models.FloatField(blank=True, null=True)),
                ('book_to_price_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('book_to_price_minmax_industry', models.FloatField(blank=True, null=True)),
                ('ebitda_to_ev_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('ebitda_to_ev_minmax_industry', models.FloatField(blank=True, null=True)),
                ('sales_to_price_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('sales_to_price_minmax_industry', models.FloatField(blank=True, null=True)),
                ('roic_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('roic_minmax_industry', models.FloatField(blank=True, null=True)),
                ('roe_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('roe_minmax_industry', models.FloatField(blank=True, null=True)),
                ('cf_to_price_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('cf_to_price_minmax_industry', models.FloatField(blank=True, null=True)),
                ('eps_growth_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('eps_growth_minmax_industry', models.FloatField(blank=True, null=True)),
                ('fwd_bps_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('fwd_bps_minmax_industry', models.FloatField(blank=True, null=True)),
                ('fwd_ebitda_to_ev_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('fwd_ebitda_to_ev_minmax_industry', models.FloatField(blank=True, null=True)),
                ('fwd_ey_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('fwd_ey_minmax_industry', models.FloatField(blank=True, null=True)),
                ('fwd_sales_to_price_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('fwd_sales_to_price_minmax_industry', models.FloatField(blank=True, null=True)),
                ('fwd_roic_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('fwd_roic_minmax_industry', models.FloatField(blank=True, null=True)),
                ('earnings_pred_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('earnings_pred_minmax_industry', models.FloatField(blank=True, null=True)),
                ('environment_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('social_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('goverment_minmax_currency_code', models.FloatField(blank=True, null=True)),
                ('environment_minmax_industry', models.FloatField(blank=True, null=True)),
                ('social_minmax_industry', models.FloatField(blank=True, null=True)),
                ('goverment_minmax_industry', models.FloatField(blank=True, null=True)),
                ('tri_quantile', models.FloatField(blank=True, null=True)),
                ('ticker', models.ForeignKey(db_column='ticker', on_delete=django.db.models.deletion.CASCADE, related_name='universe_rating_detail_history_ticker', to='universe.universe')),
            ],
            options={
                'db_table': 'universe_rating_detail_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UniverseConsolidated',
            fields=[
                ('uid', models.CharField(editable=False, max_length=20, primary_key=True, serialize=False)),
                ('origin_ticker', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('updated', models.DateField(blank=True, null=True)),
                ('isin', models.CharField(blank=True, max_length=500, null=True)),
                ('use_isin', models.BooleanField(default=False)),
                ('cusip', models.CharField(blank=True, max_length=500, null=True)),
                ('use_cusip', models.BooleanField(default=False)),
                ('sedol', models.CharField(blank=True, max_length=500, null=True)),
                ('use_sedol', models.BooleanField(default=False)),
                ('use_manual', models.BooleanField(default=False)),
                ('permid', models.CharField(blank=True, max_length=500, null=True)),
                ('consolidated_ticker', models.CharField(blank=True, max_length=50, null=True)),
                ('has_data', models.BooleanField(default=False)),
                ('source_id', models.ForeignKey(blank=True, db_column='source_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='universe_source_id', to='universe.source')),
            ],
            options={
                'db_table': 'universe_consolidated',
                'managed': True,
            },
            managers=[
                ('ingestion_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SpecialCases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cases', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateField(blank=True, null=True)),
                ('date_source', models.DateField(blank=True, null=True)),
                ('date_replace', models.DateField(blank=True, null=True)),
                ('ticker', models.ForeignKey(db_column='ticker', on_delete=django.db.models.deletion.CASCADE, related_name='special_cases_ticker', to='universe.universe')),
            ],
            options={
                'db_table': 'special_cases',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='industry',
            name='industry_group_code',
            field=models.ForeignKey(blank=True, db_column='industry_group_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='industry_industry_group_code', to='universe.industrygroup'),
        ),
        migrations.CreateModel(
            name='ExchangeMarket',
            fields=[
                ('created', models.DateTimeField()),
                ('updated', models.DateTimeField(editable=False)),
                ('mic', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('fin_id', models.CharField(blank=True, max_length=255, null=True)),
                ('exchange', models.CharField(blank=True, max_length=255, null=True)),
                ('market', models.CharField(blank=True, max_length=255, null=True)),
                ('products', models.CharField(blank=True, max_length=255, null=True)),
                ('asset_type', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.CharField(blank=True, max_length=100, null=True)),
                ('currency_code', models.ForeignKey(blank=True, db_column='currency_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='currency_exchange', to='universe.currency')),
            ],
            options={
                'db_table': 'universe_exchange_market',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CurrencyCalendars',
            fields=[
                ('uid', models.TextField(primary_key=True, serialize=False)),
                ('non_working_day', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('currency_code', models.ForeignKey(blank=True, db_column='currency_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='currency_calendar_currency_code', to='universe.currency')),
            ],
            options={
                'db_table': 'currency_calendar',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='currency',
            name='region_id',
            field=models.ForeignKey(db_column='region_id', on_delete=django.db.models.deletion.CASCADE, related_name='currency_region_id', to='universe.region'),
        ),
        migrations.AddField(
            model_name='currency',
            name='vix_id',
            field=models.ForeignKey(db_column='vix_id', on_delete=django.db.models.deletion.CASCADE, related_name='currency_vix_id', to='universe.vix'),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_code', models.TextField(primary_key=True, serialize=False)),
                ('country_name', models.TextField(blank=True, null=True)),
                ('ds_country_code', models.TextField(blank=True, null=True)),
                ('is_open', models.BooleanField(default=False)),
                ('currency_code', models.ForeignKey(blank=True, db_column='currency_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country_currency_code', to='universe.currency')),
            ],
            options={
                'db_table': 'country',
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='universe',
            index=models.Index(fields=['ticker_symbol', 'currency_code', 'mic'], name='universe_ticker__3a2a21_idx'),
        ),
    ]
