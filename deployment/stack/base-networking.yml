Resources:
    # VPC
    Asklorav21Vpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 118.0.0.0/16
            Tags:
              - Key: Name
                Value: Asklora-vpc


            # ****SUBNET****
    # == PRIVATE ==

    #Availability Zone A
    PrivateSubnetA:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: ap-east-1a
            CidrBlock: 118.0.16.0/20
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Private subnet A
    #Availability Zone C
    PrivateSubnetC:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: ap-east-1c
            CidrBlock: 118.0.0.0/24
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Private subnet C
    # == END Private AZ ==

    # == PUBLIC ==

    #Availability Zone A
    PublicSubnetA:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: ap-east-1a
            CidrBlock: 118.0.32.0/20
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Public subnet A
    #Availability Zone C
    PublicSubnetC:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: ap-east-1c
            CidrBlock: 118.0.1.0/24
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Public subnet C
    # == END Public AZ ==

            # **** END SUBNET****

    # === Route Table ====
    # Route Public
    RouteTablePublic:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Route public
    # Route Private
    RouteTablePrivate:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref Asklorav21Vpc
            Tags:
              - Key: Name
                Value: Route private
    # === End Route ====

    # Make Association Route Private to subnet
    RouteTablePrivateAssociationA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetA
            RouteTableId: !Ref RouteTablePrivate
    RouteTablePrivateAssociationB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetC
            RouteTableId: !Ref RouteTablePrivate

    # Make Association Route public to subnet
    RouteTablePublicAssociationA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnetA
            RouteTableId: !Ref RouteTablePublic
    RouteTablePublicAssociationB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnetC
            RouteTableId: !Ref RouteTablePublic

    #Set up internet gateway for public Subnet
    AskloraInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - Key: Name
                Value: internet
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId:
                Ref: Asklorav21Vpc
            InternetGatewayId:
                Ref: AskloraInternetGateway
    # Associate internet with route table public
    AskloraInternetGatewayAssociation:
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            RouteTableId:
                Ref:  RouteTablePublic
            GatewayId:
                Ref:  AskloraInternetGateway
    
    
    RuleSSHec2:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: only-ssh-sg
            GroupDescription: Limits security group only ssh traffic
            VpcId: !Ref Asklorav21Vpc
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 8080
                  ToPort: 8080
                  CidrIp: 0.0.0.0/0
    VpcSg:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: db-sg
            GroupDescription: for db instance
            VpcId: !Ref Asklorav21Vpc
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 5432
                  ToPort: 5432
                  CidrIp: 0.0.0.0/0
    PvsubnetDB:
        Type: AWS::RDS::DBSubnetGroup
        Properties: 
            DBSubnetGroupDescription: pvsubnet
            DBSubnetGroupName: pvdbsubnet
            SubnetIds: 
                - !Ref PrivateSubnetA
                - !Ref PrivateSubnetC
    
    BastionHost:
        Type: AWS::EC2::Instance
        Properties:
            KeyName: asklora-hk
            ImageId: ami-0407ba1760460a483
            InstanceType: c5.xlarge
            SecurityGroupIds:
                - !Ref RuleSSHec2
            SubnetId: !Ref PublicSubnetA
            Tags:
              - Key: Name
                Value: bastion
    
    BastionEIP:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref BastionHost


    # rdsDBInstance:
    #     Type: AWS::RDS::DBInstance
    #     Properties:
    #         DBInstanceIdentifier: askloraprivatedb-test
    #         AllocatedStorage: 20
    #         DBInstanceClass: db.t3.small
    #         AvailabilityZone: ap-east-1a
    #         DBName: postgres
    #         DBSubnetGroupName: !Ref PvsubnetDB
    #         Engine: postgres
    #         MasterUsername: postgres
    #         MasterUserPassword: ml2021#LORA
    #         MultiAZ: false
    #         Port: 5432
    #         PubliclyAccessible: false
    #         VPCSecurityGroups:
    #             - !Ref VpcSg
    
Outputs:
    VpcID:
        Description: Vpc id asklora
        Value: !Ref Asklorav21Vpc
        Export: 
            Name:
                Fn::Sub: "${AWS::StackName}-VPCID"
    PublicSubnet:
        Description: The subnet ID to use for public web servers
        Value:
            Ref: PublicSubnetA
        Export:
            Name:
                Fn::Sub: "${AWS::StackName}-PublicSubnetID"
    PrivateSubnet:
        Description: The subnet ID to use for public web servers
        Value:
            Ref: PrivateSubnetA
        Export:
            Name:
                Fn::Sub: "${AWS::StackName}-PrivateSubnetID"
    


